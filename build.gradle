apply plugin: 'java'
apply plugin : 'war'
apply plugin: 'ssh'

group = 'com.cadrlife'
version = '1.0.0'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
    
    
    compile group: 'org.mybatis', name: 'mybatis', version:'3.4.2'
    compile group: 'org.mybatis', name: 'mybatis-spring', version:'1.3.1'
    compile group: 'org.springframework', name: 'spring-jdbc', version:'4.3.7.RELEASE'
    compile group: 'org.springframework', name: 'spring-web', version:'4.3.7.RELEASE'
    compile group: 'net.sourceforge.stripes', name: 'stripes', version:'1.6.0'
    compile group: 'org.apache.taglibs', name: 'taglibs-standard-spec', version:'1.2.5'
    compile group: 'org.apache.taglibs', name: 'taglibs-standard-impl', version:'1.2.5'
    compile group: 'log4j', name: 'log4j', version:'1.2.17'
    compile group: 'org.hsqldb', name: 'hsqldb', version:'2.3.4'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version:'2.7.19'
    testCompile group: 'com.codeborne', name: 'selenide', version:'4.3'
    providedCompile   'org.apache.tomcat:tomcat-servlet-api:7.0.37'
       compile 'com.sun.jersey:jersey-bundle:1.17.1'
       compile 'com.sun.faces:jsf-api:2.1.19'
       compile 'com.sun.faces:jsf-impl:2.1.19'
       compile 'org.eclipse.persistence:javax.persistence:2.0.0'
       
       testCompile "junit:junit:3.8.1"
    compile "org.jbundle.util:org.jbundle.util.jbackup:2.0.0"
compile "net.sf.webtestfixtures:webtestfixtures:2.0.1.3"
        classpath 'org.hidetake:gradle-ssh-plugin:0.1.7'
    }
}



remotes {
    web01 {
        host = '192.168.99.100'
        port='8888'
        user = 'tomcat'
      password = 'secret'
        identity = file('ident.pem')
    }
}

ssh {   
    config(StrictHostKeyChecking: 'no') // needed for deploying to EC2
}

task deployWar(type: SshTask, dependsOn: 'war') {
    def tomcatHome = '/usr/local/tomcat/webapps'
    def warName = "jpetstore-6.0.3-SNAPSHOT"
    session(remotes.web01) {
        println "Uploading new war"
        put(war.archivePath.absolutePath,"${tomcatHome}/${warName}.war.new")
        
        println "removing old war"
        execute("rm ${tomcatHome}/${warName}.war")
        
        println "activating new war"
        execute("mv ${tomcatHome}/${warName}.war{.new,}")
    }
}
